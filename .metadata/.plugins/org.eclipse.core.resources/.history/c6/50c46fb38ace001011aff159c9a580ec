/**
 ******************************************************************************
 * @addtogroup OpenPilotModules OpenPilot Modules
 * @{ 
 * @addtogroup ET_EGT_Sensor EagleTree EGT Sensor Module
 * @brief Read ET EGT temperature sensors @ref ETEGTSensor "ETEGTSensor UAV Object"
 * @{ 
 *
 * @file       et_egt_sensor.c
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Reads dual thermocouple temperature sensors via EagleTree EGT expander
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

/**
 * Output object: ETEGTSensor
 *
 * This module will periodically update the value of the ETEGTSensor object.
 *
 */

#include "openpilot.h"
#include "et_egt.h"
#include "etegtsensor.h"	// object that will be updated by the module

// Private constants
#define STACK_SIZE_BYTES 500
#define TASK_PRIORITY (tskIDLE_PRIORITY+3)
//#define UPDATE_PERIOD 100
#define UPDATE_PERIOD 10

// Private types


// Private variables
static xTaskHandle taskHandle;

// down sampling variables
#define et_egt_ds_size    4
static int32_t et_egt_ds_temp1 = 0;
static int32_t et_egt_ds_temp2 = 0;
static int et_egt_ds_count = 0;


static bool Read(uint8_t etaddress, uint8_t length, uint8_t * buffer, uint8_t cmd)
{
	//uint8_t cmd[1];

	const struct pios_i2c_txn txn_list[] = {
		{
		 .addr = etaddress,
		 .rw = PIOS_I2C_TXN_WRITE,
		 .len = length,
		 .buf = &cmd,
		 },
		{
		 .addr = etaddress,
		 .rw = PIOS_I2C_TXN_READ,
		 .len = sizeof(buffer),
		 .buf = buffer,
		 },
	};

	//cmd[0] = 0x02;
	//cmd[1] = 0x05;
	//cmd[2] = (uint8_t) (start & 0xFF);
	//cmd[3] = (uint8_t) (start >> 8);
	//cmd[4] = length;

	return PIOS_I2C_Transfer(PIOS_I2C_MAIN_ADAPTER, txn_list, NELEMENTS(txn_list));
}

/**
 * Module thread, should not return.
 */
static void EtEgtTask(void *parameters)
{
	uint8_t buf[50] = {0};
	uint8_t ETEGTADDRESS = 119;
//	uint32_t addr = 0;
	uint32_t n;
	uint8_t cmd = 81; //128
	bool ok = false;


	EtEgtSensorData data;
	portTickType lastSysTime;

	//PIOS_BMP085_Init();

	// Main task loop
	lastSysTime = xTaskGetTickCount();
	while (1)
	{
		// Update the temperature data
		//PIOS_BMP085_StartADC(TemperatureConv);
		//xSemaphoreTake(PIOS_BMP085_EOC, portMAX_DELAY);

		n = 10;
		for(int i=117;i<256;i++){
			ETEGTADDRESS = i;
			for(int j=0;j<256;j++){
				cmd = j;

				data.Temp1 = ETEGTADDRESS;//5.0;
				data.Temp2 = cmd;
				EtEgtSensorSet(&data);

				ok = Read(ETEGTADDRESS, n, buf, cmd);

//				data.Temp1 = buf[0];//5.0;
//				data.Temp2 = buf[1];
//				EtEgtSensorSet(&data);

				if (memcmp(buf, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", n) != 0) {
					PIOS_LED_Off(LED2);

					data.Address = ETEGTADDRESS;//5.0;
					data.Cmd = cmd;
					EtEgtSensorSet(&data);

					while(1) {
						ok = Read(ETEGTADDRESS, n, buf, cmd);

						data.buf0 = buf[0];//5.0;
						data.buf1 = buf[1];
						data.buf2 = buf[2];
						data.buf3 = buf[3];
						data.buf4 = buf[4];
						data.buf5 = buf[5];
						data.buf6 = buf[6];
						data.buf7 = buf[7];
						data.buf8 = buf[8];
						data.buf9 = buf[9];

						EtEgtSensorSet(&data);


						// Delay until it is time to read the next sample
						vTaskDelayUntil(&lastSysTime, 100 / portTICK_RATE_MS);;
					}
				}

				//float x  = (float)ETEGTADDRESS;
				//float y = (float)(buf[0]);

				//data.Temp1 = 5.0;
				//data.Temp2 = 10.0;

				//if (++et_egt_ds_count >= et_egt_ds_size)
			   // {
				//    alt_ds_count = 0;

					// Convert from 1/10ths of degC to degC
					//data.Temperature = alt_ds_temp / (10.0 * alt_ds_size);
					//alt_ds_temp = 0;

					// Compute the current altitude (all pressures in kPa)
					//data.Altitude = 44330.0 * (1.0 - powf((data.Pressure / (BMP085_P0 / 1000.0)), (1.0 / 5.255)));

					// Update the EtEgtSensor UAVObject

			   // }
				EtEgtSensorSet(&data);
		
				// Delay until it is time to read the next sample
				vTaskDelayUntil(&lastSysTime, UPDATE_PERIOD / portTICK_RATE_MS);
			}
		}
	}
}

// Private functions
//static void EtEgtTask(void *parameters);

/**
* Initialise the module, called on startup
* \returns 0 on success or -1 if initialisation failed
*/
int32_t EtEgtStart()
{
// Start main task
xTaskCreate(EtEgtTask, (signed char *)"EtEgt", STACK_SIZE_BYTES/4, NULL, TASK_PRIORITY, &taskHandle);
//TaskMonitorAdd(TASKINFO_RUNNING_ETEGTSENSOR, taskHandle);
return 0;
}

/**
* Initialise the module, called on startup
* \returns 0 on success or -1 if initialisation failed
*/
int32_t EtEgtInitialize()
{

// init down-sampling data
et_egt_ds_temp1 = 0;
et_egt_ds_temp2 = 0;
et_egt_ds_count = 0;

return 0;
}

MODULE_INITCALL(EtEgtInitialize, EtEgtStart)

/**
  * @}
 * @}
 */
