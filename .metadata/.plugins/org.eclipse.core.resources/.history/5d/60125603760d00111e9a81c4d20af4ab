/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup HwSettings HwSettings 
 * @brief Selection of optional hardware configurations.
 *
 * Autogenerated files and functions for HwSettings Object
 
 * @{ 
 *
 * @file       hwsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Implementation of the HwSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWSETTINGS_H
#define HWSETTINGS_H

// Object constants
#define HWSETTINGS_OBJID 0xDD3492E2
#define HWSETTINGS_NAME "HwSettings"
#define HWSETTINGS_METANAME "HwSettingsMeta"
#define HWSETTINGS_ISSINGLEINST 1
#define HWSETTINGS_ISSETTINGS 1
#define HWSETTINGS_NUMBYTES sizeof(HwSettingsData)

// Object access macros
/**
 * @function HwSettingsGet(dataOut)
 * @brief Populate a HwSettingsData object
 * @param[out] dataOut 
 */
#define HwSettingsGet(dataOut) UAVObjGetData(HwSettingsHandle(), dataOut)
#define HwSettingsSet(dataIn) UAVObjSetData(HwSettingsHandle(), dataIn)
#define HwSettingsInstGet(instId, dataOut) UAVObjGetInstanceData(HwSettingsHandle(), instId, dataOut)
#define HwSettingsInstSet(instId, dataIn) UAVObjSetInstanceData(HwSettingsHandle(), instId, dataIn)
#define HwSettingsConnectQueue(queue) UAVObjConnectQueue(HwSettingsHandle(), queue, EV_MASK_ALL_UPDATES)
#define HwSettingsConnectCallback(cb) UAVObjConnectCallback(HwSettingsHandle(), cb, EV_MASK_ALL_UPDATES)
#define HwSettingsCreateInstance() UAVObjCreateInstance(HwSettingsHandle(),&HwSettingsSetDefaults)
#define HwSettingsRequestUpdate() UAVObjRequestUpdate(HwSettingsHandle())
#define HwSettingsRequestInstUpdate(instId) UAVObjRequestInstanceUpdate(HwSettingsHandle(), instId)
#define HwSettingsUpdated() UAVObjUpdated(HwSettingsHandle())
#define HwSettingsInstUpdated(instId) UAVObjUpdated(HwSettingsHandle(), instId)
#define HwSettingsGetMetadata(dataOut) UAVObjGetMetadata(HwSettingsHandle(), dataOut)
#define HwSettingsSetMetadata(dataIn) UAVObjSetMetadata(HwSettingsHandle(), dataIn)
#define HwSettingsReadOnly(dataIn) UAVObjReadOnly(HwSettingsHandle())

// Object data
typedef struct {
    uint8_t CC_RcvrPort;
    uint8_t CC_MainPort;
    uint8_t CC_FlexiPort;
    uint8_t OP_RcvrPort;
    uint8_t OP_MainPort;
    uint8_t OP_FlexiPort;
    uint8_t TelemetrySpeed;
    uint8_t GPSSpeed;
    uint8_t OptionalModules[2];
    uint8_t DSMxBind;

} __attribute__((packed)) HwSettingsData;

// Field information
// Field CC_RcvrPort information
/* Enumeration options for field CC_RcvrPort */
typedef enum { HWSETTINGS_CC_RCVRPORT_DISABLED=0, HWSETTINGS_CC_RCVRPORT_PWM=1, HWSETTINGS_CC_RCVRPORT_PPM=2, HWSETTINGS_CC_RCVRPORT_PPMSERVO=3, HWSETTINGS_CC_RCVRPORT_SERVO=4, HWSETTINGS_CC_FLEXIPORT_GPS=5} HwSettingsCC_RcvrPortOptions;
// Field CC_MainPort information
/* Enumeration options for field CC_MainPort */
typedef enum { HWSETTINGS_CC_MAINPORT_DISABLED=0, HWSETTINGS_CC_MAINPORT_TELEMETRY=1, HWSETTINGS_CC_MAINPORT_GPS=2, HWSETTINGS_CC_MAINPORT_SBUS=3, HWSETTINGS_CC_MAINPORT_DSM2=4, HWSETTINGS_CC_MAINPORT_DSMX10BIT=5, HWSETTINGS_CC_MAINPORT_DSMX11BIT=6, HWSETTINGS_CC_MAINPORT_COMAUX=7 } HwSettingsCC_MainPortOptions;
// Field CC_FlexiPort information
/* Enumeration options for field CC_FlexiPort */
typedef enum { HWSETTINGS_CC_FLEXIPORT_DISABLED=0, HWSETTINGS_CC_FLEXIPORT_TELEMETRY=1, HWSETTINGS_CC_FLEXIPORT_GPS=2, HWSETTINGS_CC_FLEXIPORT_I2C=3, HWSETTINGS_CC_FLEXIPORT_DSM2=4, HWSETTINGS_CC_FLEXIPORT_DSMX10BIT=5, HWSETTINGS_CC_FLEXIPORT_DSMX11BIT=6, HWSETTINGS_CC_FLEXIPORT_COMAUX=7 } HwSettingsCC_FlexiPortOptions;
// Field OP_RcvrPort information
/* Enumeration options for field OP_RcvrPort */
typedef enum { HWSETTINGS_OP_RCVRPORT_DISABLED=0, HWSETTINGS_OP_RCVRPORT_PWM=1, HWSETTINGS_OP_RCVRPORT_PPM=2, HWSETTINGS_OP_RCVRPORT_DSM2=3, HWSETTINGS_OP_RCVRPORT_DSMX10BIT=4, HWSETTINGS_OP_RCVRPORT_DSMX11BIT=5, HWSETTINGS_OP_RCVRPORT_DEBUG=6 } HwSettingsOP_RcvrPortOptions;
// Field OP_MainPort information
/* Enumeration options for field OP_MainPort */
typedef enum { HWSETTINGS_OP_MAINPORT_DISABLED=0, HWSETTINGS_OP_MAINPORT_TELEMETRY=1 } HwSettingsOP_MainPortOptions;
// Field OP_FlexiPort information
/* Enumeration options for field OP_FlexiPort */
typedef enum { HWSETTINGS_OP_FLEXIPORT_DISABLED=0, HWSETTINGS_OP_FLEXIPORT_GPS=1 } HwSettingsOP_FlexiPortOptions;
// Field TelemetrySpeed information
/* Enumeration options for field TelemetrySpeed */
typedef enum { HWSETTINGS_TELEMETRYSPEED_2400=0, HWSETTINGS_TELEMETRYSPEED_4800=1, HWSETTINGS_TELEMETRYSPEED_9600=2, HWSETTINGS_TELEMETRYSPEED_19200=3, HWSETTINGS_TELEMETRYSPEED_38400=4, HWSETTINGS_TELEMETRYSPEED_57600=5, HWSETTINGS_TELEMETRYSPEED_115200=6 } HwSettingsTelemetrySpeedOptions;
// Field GPSSpeed information
/* Enumeration options for field GPSSpeed */
typedef enum { HWSETTINGS_GPSSPEED_2400=0, HWSETTINGS_GPSSPEED_4800=1, HWSETTINGS_GPSSPEED_9600=2, HWSETTINGS_GPSSPEED_19200=3, HWSETTINGS_GPSSPEED_38400=4, HWSETTINGS_GPSSPEED_57600=5, HWSETTINGS_GPSSPEED_115200=6 } HwSettingsGPSSpeedOptions;
// Field OptionalModules information
/* Enumeration options for field OptionalModules */
typedef enum { HWSETTINGS_OPTIONALMODULES_DISABLED=0, HWSETTINGS_OPTIONALMODULES_ENABLED=1 } HwSettingsOptionalModulesOptions;
/* Array element names for field OptionalModules */
typedef enum { HWSETTINGS_OPTIONALMODULES_CAMERASTAB=0, HWSETTINGS_OPTIONALMODULES_GPS=1 } HwSettingsOptionalModulesElem;
/* Number of elements for field OptionalModules */
#define HWSETTINGS_OPTIONALMODULES_NUMELEM 2
// Field DSMxBind information


// Generic interface functions
int32_t HwSettingsInitialize();
UAVObjHandle HwSettingsHandle();
void HwSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// set/Get functions
extern void HwSettingsCC_RcvrPortSet( uint8_t *NewCC_RcvrPort );
extern void HwSettingsCC_RcvrPortGet( uint8_t *NewCC_RcvrPort );
extern void HwSettingsCC_MainPortSet( uint8_t *NewCC_MainPort );
extern void HwSettingsCC_MainPortGet( uint8_t *NewCC_MainPort );
extern void HwSettingsCC_FlexiPortSet( uint8_t *NewCC_FlexiPort );
extern void HwSettingsCC_FlexiPortGet( uint8_t *NewCC_FlexiPort );
extern void HwSettingsOP_RcvrPortSet( uint8_t *NewOP_RcvrPort );
extern void HwSettingsOP_RcvrPortGet( uint8_t *NewOP_RcvrPort );
extern void HwSettingsOP_MainPortSet( uint8_t *NewOP_MainPort );
extern void HwSettingsOP_MainPortGet( uint8_t *NewOP_MainPort );
extern void HwSettingsOP_FlexiPortSet( uint8_t *NewOP_FlexiPort );
extern void HwSettingsOP_FlexiPortGet( uint8_t *NewOP_FlexiPort );
extern void HwSettingsTelemetrySpeedSet( uint8_t *NewTelemetrySpeed );
extern void HwSettingsTelemetrySpeedGet( uint8_t *NewTelemetrySpeed );
extern void HwSettingsGPSSpeedSet( uint8_t *NewGPSSpeed );
extern void HwSettingsGPSSpeedGet( uint8_t *NewGPSSpeed );
extern void HwSettingsOptionalModulesSet( uint8_t *NewOptionalModules );
extern void HwSettingsOptionalModulesGet( uint8_t *NewOptionalModules );
extern void HwSettingsDSMxBindSet( uint8_t *NewDSMxBind );
extern void HwSettingsDSMxBindGet( uint8_t *NewDSMxBind );


#endif // HWSETTINGS_H

/**
 * @}
 * @}
 */
