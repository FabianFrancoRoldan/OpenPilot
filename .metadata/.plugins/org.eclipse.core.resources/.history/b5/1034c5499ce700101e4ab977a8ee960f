/**
 ******************************************************************************
 * @addtogroup OpenPilotModules OpenPilot Modules
 * @{ 
 * @addtogroup ET_EGT_Sensor EagleTree EGT Sensor Module
 * @brief Read ET EGT temperature sensors @ref ETEGTSensor "ETEGTSensor UAV Object"
 * @{ 
 *
 * @file       et_egt_sensor.c
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Reads dual thermocouple temperature sensors via EagleTree EGT expander
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

/**
 * Output object: mcp3424sensor
 *
 * This module will periodically update the value of the mcp3424sensor object.
 *
 */

#include "openpilot.h"
#include "mcp3424.h"
#include "mcp3424sensor.h"	// object that will be updated by the module

// Private constants
#define STACK_SIZE_BYTES 400
#define TASK_PRIORITY (tskIDLE_PRIORITY+1)
//#define UPDATE_PERIOD 100
#define UPDATE_PERIOD 200

// Private types
#define MCP9804_I2C_ADDRESS 0x3F //Cold junction temp sensor
#define MCP3424_I2C_ADDRESS 0x68 //A/D sensor

// Private variables
static xTaskHandle taskHandle;

// down sampling variables
#define MCP3424_ds_size    4
static int32_t MCP3424_ds_temp1 = 0;
static int32_t MCP3424_ds_temp2 = 0;
static int MCP3424_ds_count = 0;

// Private functions
static void MCP3424Task(void *parameters);

/**
* Initialise the module, called on startup
* \returns 0 on success or -1 if initialisation failed
*/
int32_t MCP3424Start()
{

	// Start main task
	xTaskCreate(MCP3424Task, (signed char *)"MCP3424", STACK_SIZE_BYTES/4, NULL, TASK_PRIORITY, &taskHandle);
	TaskMonitorAdd(TASKINFO_RUNNING_MCP3424, taskHandle);
	return 0;
}

/**
* Initialise the module, called on startup
* \returns 0 on success or -1 if initialisation failed
*/
int32_t MCP3424Initialize()
{

	mcp3424sensorInitialize(); //Initialise the UAVObject used for transferring data to GCS

	// init down-sampling data
	MCP3424_ds_temp1 = 0;
	MCP3424_ds_temp2 = 0;
	MCP3424_ds_count = 0;

	return 0;
}

MODULE_INITCALL(MCP3424Initialize, MCP3424Start)


static bool Read_Cold_Junction_Temp(uint8_t* buffer)
{
	uint8_t cmd = 0x01;
	const struct pios_i2c_txn txn_list_1[] = {
		{
		 .addr = MCP9804_I2C_ADDRESS,// & 0xFE, //Bit 0 must be 0 to write
		 .rw = PIOS_I2C_TXN_WRITE,
		 .len = 1,
		 .buf = &cmd, //Read ambient temperature register
		 },
		{
		 .addr = MCP9804_I2C_ADDRESS,// | 0x01, //Bit 0 must be 1 to read
		 .rw = PIOS_I2C_TXN_READ,
		 .len = 1,
		 .buf = buffer,
		 },

	};

	return PIOS_I2C_Transfer(PIOS_I2C_MAIN_ADAPTER, txn_list_1, NELEMENTS(txn_list_1));

	const struct pios_i2c_txn txn_list_2[] = {
		{
		 .addr = MCP9804_I2C_ADDRESS, //Bit 0 must be 1 to read
		 .rw = PIOS_I2C_TXN_READ,
		 .len = 1,
		 .buf = buffer,
		 },
	};

	return PIOS_I2C_Transfer(PIOS_I2C_MAIN_ADAPTER, txn_list_2, NELEMENTS(txn_list_2));
}

static bool Read_Hot_Junction_Temp(uint8_t* buffer)
{
	const struct pios_i2c_txn txn_list_1[] = {
		{
		 .addr = MCP3424_I2C_ADDRESS,
		 .rw = PIOS_I2C_TXN_READ,
		 .len = 4, //Upper, Middle, Lower data bytes and config byte returned for 18 bit mode
		 .buf = buffer,
		 },
	};

	return PIOS_I2C_Transfer(PIOS_I2C_MAIN_ADAPTER, txn_list_1, NELEMENTS(txn_list_1));
}

static bool SetParametersMCP3424(uint8_t *config){

	const struct pios_i2c_txn txn_list_1[] = {
		{
		 .addr = MCP3424_I2C_ADDRESS,
		 .rw = PIOS_I2C_TXN_WRITE,
		 .len = 1,
		 .buf = config,
		 },
	};

	return PIOS_I2C_Transfer(PIOS_I2C_MAIN_ADAPTER, txn_list_1, NELEMENTS(txn_list_1));
}
/*
static bool Read(uint8_t etaddress, uint8_t length, uint8_t * buffer, uint8_t cmd)
{
	//uint8_t cmd[1];

	const struct pios_i2c_txn txn_list_1[] = {
		{
		 .addr = etaddress,
		 .rw = PIOS_I2C_TXN_WRITE,
		 .len = 1,
		 .buf = &cmd,
		 },
	};

	return PIOS_I2C_Transfer(PIOS_I2C_MAIN_ADAPTER, txn_list_1, NELEMENTS(txn_list_1));

	//cmd[0] = 0x02;
	//cmd[1] = 0x05;
	//cmd[2] = (uint8_t) (start & 0xFF);
	//cmd[3] = (uint8_t) (start >> 8);
	//cmd[4] = length;

	bool ok = PIOS_I2C_Transfer(PIOS_I2C_MAIN_ADAPTER, txn_list_1, NELEMENTS(txn_list_1));

	if(ok) {
		const struct pios_i2c_txn txn_list_2[] = {
			{
			 .addr = etaddress,
			 .rw = PIOS_I2C_TXN_READ,
			 .len = length,
			 .buf = buffer,
			 },
		};

		return PIOS_I2C_Transfer(PIOS_I2C_MAIN_ADAPTER, txn_list_2, NELEMENTS(txn_list_2));
	}
	else
		return false;

}
*/

/**
 * Module thread, should not return.
 */
//static void MCP3424Task(void *parameters)
//{
//	portTickType lastSysTime;
//
//	while(1) {
//		Read_Hot_Junction_Temp(buf);
//
//		// Delay until it is time to read the next sample
//		vTaskDelayUntil(&lastSysTime, UPDATE_PERIOD / portTICK_RATE_MS);
//	}
//}

static void MCP3424Task(void *parameters)
{
	uint8_t gain = 8;
	uint8_t resolution = 18;

	uint8_t PGAgain = 3;
//	switch(gain) {
//	case(8):
//			PGAgain = 3;
//	case(4):
//			PGAgain = 2;
//	case(2):
//			PGAgain = 1;
//	case(1):
//			PGAgain = 0;
//	}

	uint8_t SampleRate = 3;
//	switch(resolution) {
//	case(18):
//			SampleRate = 3; //0 = 240 SPS, 3 = 3.75 sps (18 bits)
//	case(16):
//			SampleRate = 2;
//	case(14):
//			SampleRate = 1;
//	case(12):
//			SampleRate = 0;
//	}

	uint8_t ConversionModeBit = 1; //Continuous
	uint8_t ChannelBits = 0; //0 = Channel 1
	uint8_t config = PGAgain | (SampleRate << 2) | (ConversionModeBit << 4) | (ChannelBits << 6);

	bool bParamSet = false;

	if(SetParametersMCP3424(&config))
		bParamSet = true;

	/*
	 * MCP9804 will send data when address byte is received in READ mode
	 *
	 */
	uint8_t buf[4] = {0};

	portTickType lastSysTime;

	mcp3424sensorData d1;

	double_t channel1 = 0;
	uint32_t chanOneRaw = 0;
	uint8_t data1, data2, data3 = 0;
	double_t refVoltage = 2.048;
	double_t vPerC = 0.0000403; //volts per celcius for K-type thermocouple
	double_t LSB = 2 * refVoltage / (1 << resolution);

	//down sample variables
	double_t chan1_ds_size = 3;
	double_t chan1_ds_temp = 0;
	double_t chan1_ds_count = 0;

	// Main task loop
	lastSysTime = xTaskGetTickCount();
	while(1) {

		bool b = Read_Hot_Junction_Temp(buf);
		if(b) {
			PIOS_LED_On(LED2);

			//Assume K-type thermocouple is connected to channel 1
			int8_t sign = buf[0];
			buf[0] = buf[0] & 0x01; //ignore the first 7 bits
			data1 = buf[0];
			data2 = buf[1];
			data3 = buf[2];
			chanOneRaw = (int)((data1 << 16) | (data2 << 8) | data3);

			//do conversion here
			channel1 = chanOneRaw * LSB / vPerC / gain;
			if(sign < 0) {
				channel1 = (1 << resolution) - channel1;

			//down sample
			chan1_ds_temp += channel1;
			if (++chan1_ds_count >= chan1_ds_size)
	        {
			    chan1_ds_count = 0;

			    // Get average of last 10 samples
	            channel1 = chan1_ds_temp / chan1_ds_size;
	            chan1_ds_temp = 0;
	        }


			d1.buf0 = buf[0]; //data1
			d1.buf1 = buf[1]; //data2
			d1.buf2 = buf[2]; //data3
			d1.buf3 = chanOneRaw;
			d1.Channel1 = channel1; //calculated temperature
			d1.buf8 = buf[3]; //config register
			d1.buf9 = 0;
		}
		else {
			PIOS_LED_Off(LED2);
			d1.buf0 = 99;
			d1.buf1 = 99;
			d1.buf2 = 99;
			d1.buf9 = 111;

			//configuration may be wrong so set flag to set parameters again
			bParamSet = false;
		}

		mcp3424sensorSet(&d1);

		// Delay until it is time to read the next sample
		vTaskDelayUntil(&lastSysTime, UPDATE_PERIOD / portTICK_RATE_MS);
	}

	Read_Hot_Junction_Temp(buf);
	Read_Cold_Junction_Temp(buf);

}

/**
  * @}
 * @}
 */
