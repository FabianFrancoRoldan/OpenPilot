/**
 ******************************************************************************
 *
 * @file       uavobjecttemplate.cpp
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Template for an uavobject in java
 *             This is a autogenerated file!! Do not modify and expect a result.
 *             Settings for the INS to control the algorithm and what is updated
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.openpilot.uavtalk.uavobjects;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.openpilot.uavtalk.UAVObjectManager;
import org.openpilot.uavtalk.UAVObject;
import org.openpilot.uavtalk.UAVDataObject;
import org.openpilot.uavtalk.UAVObjectField;

/**
Settings for the INS to control the algorithm and what is updated

generated from revocalibration.xml
 **/
public class RevoCalibration extends UAVDataObject {

	public RevoCalibration() {
		super(OBJID, ISSINGLEINST, ISSETTINGS, NAME);
		
		List<UAVObjectField> fields = new ArrayList<UAVObjectField>();
		

		List<String> accel_biasElemNames = new ArrayList<String>();
		accel_biasElemNames.add("X");
		accel_biasElemNames.add("Y");
		accel_biasElemNames.add("Z");
		fields.add( new UAVObjectField("accel_bias", "m/s", UAVObjectField.FieldType.FLOAT32, accel_biasElemNames, null) );

		List<String> accel_scaleElemNames = new ArrayList<String>();
		accel_scaleElemNames.add("X");
		accel_scaleElemNames.add("Y");
		accel_scaleElemNames.add("Z");
		fields.add( new UAVObjectField("accel_scale", "gain", UAVObjectField.FieldType.FLOAT32, accel_scaleElemNames, null) );

		List<String> accel_varElemNames = new ArrayList<String>();
		accel_varElemNames.add("X");
		accel_varElemNames.add("Y");
		accel_varElemNames.add("Z");
		fields.add( new UAVObjectField("accel_var", "(m/s)^2", UAVObjectField.FieldType.FLOAT32, accel_varElemNames, null) );

		List<String> gyro_biasElemNames = new ArrayList<String>();
		gyro_biasElemNames.add("X");
		gyro_biasElemNames.add("Y");
		gyro_biasElemNames.add("Z");
		fields.add( new UAVObjectField("gyro_bias", "deg/s", UAVObjectField.FieldType.FLOAT32, gyro_biasElemNames, null) );

		List<String> gyro_scaleElemNames = new ArrayList<String>();
		gyro_scaleElemNames.add("X");
		gyro_scaleElemNames.add("Y");
		gyro_scaleElemNames.add("Z");
		fields.add( new UAVObjectField("gyro_scale", "gain", UAVObjectField.FieldType.FLOAT32, gyro_scaleElemNames, null) );

		List<String> gyro_varElemNames = new ArrayList<String>();
		gyro_varElemNames.add("X");
		gyro_varElemNames.add("Y");
		gyro_varElemNames.add("Z");
		fields.add( new UAVObjectField("gyro_var", "(deg/s)^2", UAVObjectField.FieldType.FLOAT32, gyro_varElemNames, null) );

		List<String> gyro_tempcoeffElemNames = new ArrayList<String>();
		gyro_tempcoeffElemNames.add("X");
		gyro_tempcoeffElemNames.add("Y");
		gyro_tempcoeffElemNames.add("Z");
		fields.add( new UAVObjectField("gyro_tempcoeff", "(deg/s)/deg", UAVObjectField.FieldType.FLOAT32, gyro_tempcoeffElemNames, null) );

		List<String> mag_biasElemNames = new ArrayList<String>();
		mag_biasElemNames.add("X");
		mag_biasElemNames.add("Y");
		mag_biasElemNames.add("Z");
		fields.add( new UAVObjectField("mag_bias", "mGau", UAVObjectField.FieldType.FLOAT32, mag_biasElemNames, null) );

		List<String> mag_scaleElemNames = new ArrayList<String>();
		mag_scaleElemNames.add("X");
		mag_scaleElemNames.add("Y");
		mag_scaleElemNames.add("Z");
		fields.add( new UAVObjectField("mag_scale", "gain", UAVObjectField.FieldType.FLOAT32, mag_scaleElemNames, null) );

		List<String> mag_varElemNames = new ArrayList<String>();
		mag_varElemNames.add("X");
		mag_varElemNames.add("Y");
		mag_varElemNames.add("Z");
		fields.add( new UAVObjectField("mag_var", "mGau^2", UAVObjectField.FieldType.FLOAT32, mag_varElemNames, null) );

		List<String> BiasCorrectedRawElemNames = new ArrayList<String>();
		BiasCorrectedRawElemNames.add("0");
		List<String> BiasCorrectedRawEnumOptions = new ArrayList<String>();
		BiasCorrectedRawEnumOptions.add("TRUE");
		BiasCorrectedRawEnumOptions.add("FALSE");
		fields.add( new UAVObjectField("BiasCorrectedRaw", "", UAVObjectField.FieldType.ENUM, BiasCorrectedRawElemNames, BiasCorrectedRawEnumOptions) );


		// Compute the number of bytes for this object
		int numBytes = 0;
		ListIterator<UAVObjectField> li = fields.listIterator();
		while(li.hasNext()) {
			numBytes += li.next().getNumBytes();
		}
		NUMBYTES = numBytes;

		// Initialize object
		initializeFields(fields, ByteBuffer.allocate(NUMBYTES), NUMBYTES);
		// Set the default field values
		setDefaultFieldValues();
		// Set the object description
		setDescription(DESCRIPTION);
	}

	/**
	 * Create a Metadata object filled with default values for this object
	 * @return Metadata object with default values
	 */
	public Metadata getDefaultMetadata() {
		UAVObject.Metadata metadata = new UAVObject.Metadata();
    	metadata.flags =
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_ACCESS_SHIFT |
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_GCS_ACCESS_SHIFT |
		    1 << UAVOBJ_TELEMETRY_ACKED_SHIFT |
		    1 << UAVOBJ_GCS_TELEMETRY_ACKED_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT;
    	metadata.flightTelemetryUpdatePeriod = 0;
    	metadata.gcsTelemetryUpdatePeriod = 0;
    	metadata.loggingUpdatePeriod = 0;
 
		return metadata;
	}

	/**
	 * Initialize object fields with the default values.
	 * If a default value is not specified the object fields
	 * will be initialized to zero.
	 */
	public void setDefaultFieldValues()
	{
		getField("accel_bias").setValue(0,0);
		getField("accel_bias").setValue(0,1);
		getField("accel_bias").setValue(0,2);
		getField("accel_scale").setValue(1,0);
		getField("accel_scale").setValue(1,1);
		getField("accel_scale").setValue(1,2);
		getField("accel_var").setValue(1,0);
		getField("accel_var").setValue(1,1);
		getField("accel_var").setValue(1,2);
		getField("gyro_bias").setValue(0,0);
		getField("gyro_bias").setValue(0,1);
		getField("gyro_bias").setValue(0,2);
		getField("gyro_scale").setValue(1,0);
		getField("gyro_scale").setValue(1,1);
		getField("gyro_scale").setValue(1,2);
		getField("gyro_var").setValue(1,0);
		getField("gyro_var").setValue(1,1);
		getField("gyro_var").setValue(1,2);
		getField("gyro_tempcoeff").setValue(1,0);
		getField("gyro_tempcoeff").setValue(1,1);
		getField("gyro_tempcoeff").setValue(1,2);
		getField("mag_bias").setValue(0,0);
		getField("mag_bias").setValue(0,1);
		getField("mag_bias").setValue(0,2);
		getField("mag_scale").setValue(1,0);
		getField("mag_scale").setValue(1,1);
		getField("mag_scale").setValue(1,2);
		getField("mag_var").setValue(50,0);
		getField("mag_var").setValue(50,1);
		getField("mag_var").setValue(50,2);
		getField("BiasCorrectedRaw").setValue("TRUE");

	}

	/**
	 * Create a clone of this object, a new instance ID must be specified.
	 * Do not use this function directly to create new instances, the
	 * UAVObjectManager should be used instead.
	 */
	public UAVDataObject clone(long instID) {
		// TODO: Need to get specific instance to clone
		try {
			RevoCalibration obj = new RevoCalibration();
			obj.initialize(instID, this.getMetaObject());
			return obj;
		} catch  (Exception e) {
			return null;
		}
	}

	/**
	 * Static function to retrieve an instance of the object.
	 */
	public RevoCalibration GetInstance(UAVObjectManager objMngr, long instID)
	{
	    return (RevoCalibration)(objMngr.getObject(RevoCalibration.OBJID, instID));
	}

	// Constants
	protected static final long OBJID = 0xC26D37B2l;
	protected static final String NAME = "RevoCalibration";
	protected static String DESCRIPTION = "Settings for the INS to control the algorithm and what is updated";
	protected static final boolean ISSINGLEINST = 1 > 0;
	protected static final boolean ISSETTINGS = 1 > 0;
	protected static int NUMBYTES = 0;


}
